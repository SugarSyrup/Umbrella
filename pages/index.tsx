import React, { useState } from 'react';
import Head from 'next/head'
import axios, {AxiosError, AxiosResponse} from 'axios';

import {useForm} from 'react-hook-form';
import { FieldValues, SubmitHandler } from 'react-hook-form/dist/types';

//TODO : BackEnd Url 입력하기
const API_LOGIN_URL = "";
const JWT_EXPIRY_TIME = 1 * 3600 * 1000; // 만료 시간 (24시간 밀리 초로 표현)

export default function Home() {
  const [toggleLogin, setToggleLogin] = useState<boolean>(true);
  const {register, handleSubmit, formState: {errors}} = useForm();
  
  const onLogin = (username:string, password:string) => {
    axios.post(API_LOGIN_URL, {username, password})
      .then(onLoginSuccess)
      .catch(onError);
  }
  
  const onSilentRefresh = (data:{username:string, password:string}) => {
    axios.post('/silent-refresh', data)
      .then(onLoginSuccess)
      .catch(onError);
  }
  
  const onLoginSuccess = (response : AxiosResponse) => {
    const { accessToken } = response.data;
    axios.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;

    setTimeout(onSilentRefresh, JWT_EXPIRY_TIME);
  }

  const onError = (error: Error|AxiosError) => {
    console.debug(error);
  }
  const onSignUp = async (username:string, password:string) => {
    axios.post('/singup', {username, password});
  }

  const onSubmit:SubmitHandler<FieldValues> = (data) => {
    console.log(data);
  }
  const onToggleLogin = ():void => {
    setToggleLogin((prev) => !prev);
  }

  return (
    <>
      <Head>
        <title>Login</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="stylesheet" href="https://unpkg.com/mvp.css@1.12/mvp.css" /> 
      </Head>
      <main>
        <form onSubmit={handleSubmit(onSubmit)}>
          <label htmlFor='username'>UserName</label>
          <input {...register('username', {required: true})} id="username" placeholder='username'style={{width:'50%'}}/>
          {errors.username && <p style={{color:'red'}}>Username is required</p>}
          <label htmlFor='password'>PassWord</label>
          <input {...register('password', {required: true})} type="password" id="password" placeholder='password' />
          {errors.password && <p style={{color:'red'}}>Password is required</p>}
          <input type="submit" value={toggleLogin ? '로그인' : '회원가입'} />
        </form>
        <button onClick={onToggleLogin}>{!toggleLogin ? '로그인하기' : '회원가입하기'}</button>
      </main>
    </>
  )
}

// export async function getServerSideProps() {

// }